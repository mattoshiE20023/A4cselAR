name: Development build

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build_unity:
    name: Build ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - iOS
    
    steps:
      # Actionsがリポジトリにアクセスできるようにする
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # LibraryをCacheしてBuildを高速化する
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**','ProjectSettings/**') }}
          restore-keys:
            Library-
            
      # MacOS Buildする
      - name: Build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Custom
          version: 0.1.${{ github.run_number }}
          
      - uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  build_xcode:
    runs-on: macos-latest
    needs: build_unity
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: Build-iOS
          path: build/iOS

      - name: Fix File Permissions
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;

      - uses: actions/upload-artifact@v2
        with:
          name: Build-iOS-ipa
          path: build/output

      - name: Build Xcode
        uses: maierj/fastlane-action@v2.0.0
        with:
          lane: 'ios development'

#      - name: Cleanup
#        if: always()
#        uses: geekyeggo/delete-artifact@v1
#        with:
#          name: Build-iOS

    
